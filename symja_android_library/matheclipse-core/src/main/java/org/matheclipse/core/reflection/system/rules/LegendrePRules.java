package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.$p;
import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.CN2;
import static org.matheclipse.core.expression.F.EllipticK;
import static org.matheclipse.core.expression.F.Gamma;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISet;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.IntegerQ;
import static org.matheclipse.core.expression.F.LegendreP;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.NumericQ;
import static org.matheclipse.core.expression.F.Pi;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;
import static org.matheclipse.core.expression.F.z;
import static org.matheclipse.core.expression.F.z_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface LegendrePRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 1, 1 };

  final public static IAST RULES = List(
    IInit(LegendreP, SIZES),
    // LegendreP(x_,1)=1
    ISet(LegendreP(x_,C1),
      C1),
    // LegendreP(x_NumericQ,0):=Sqrt(Pi)/(Gamma(1/2*(1-x))*Gamma(1+x/2))
    ISetDelayed(LegendreP($p(x,NumericQ),C0),
      Times(Sqrt(Pi),Power(Times(Gamma(Times(C1D2,Plus(C1,Negate(x)))),Gamma(Plus(C1,Times(C1D2,x)))),-1))),
    // LegendreP(x_IntegerQ,-1):=(-1)^x
    ISetDelayed(LegendreP($p(x,IntegerQ),CN1),
      Power(CN1,x)),
    // LegendreP(-1/2,1-2*z_):=2/Pi*EllipticK(z)
    ISetDelayed(LegendreP(CN1D2,Plus(C1,Times(CN2,z_))),
      Times(C2,Power(Pi,-1),EllipticK(z)))
  );
}

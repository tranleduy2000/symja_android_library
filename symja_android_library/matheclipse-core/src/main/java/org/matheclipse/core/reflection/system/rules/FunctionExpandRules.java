package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;
/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface FunctionExpandRules {
  final public static IAST RULES = List(
    // ArcCot(Sqrt(x_^2)):=(Sqrt(x^2)*ArcCot(x))/x
    SetDelayed(ArcCot(Sqrt(Sqr(x_))),
      Times(Power(x,CN1),Sqrt(Sqr(x)),ArcCot(x))),
    // ArcSin(Sqrt(x_^2)):=(Sqrt(x^2)*ArcSin(x))/x
    SetDelayed(ArcSin(Sqrt(Sqr(x_))),
      Times(Power(x,CN1),Sqrt(Sqr(x)),ArcSin(x))),
    // ArcTan(Sqrt(x_^2)):=(Sqrt(x^2)*ArcTan(x))/x
    SetDelayed(ArcTan(Sqrt(Sqr(x_))),
      Times(Power(x,CN1),Sqrt(Sqr(x)),ArcTan(x))),
    // Cos(n_Integer*ArcSin(z_)):=ChebyshevT(n,Sqrt(1-z^2))/;n>0
    SetDelayed(Cos(Times(ArcSin(z_),$p(n, Integer))),
      Condition(ChebyshevT(n,Sqrt(Subtract(C1,Sqr(z)))),Greater(n,C0))),
    // Gamma(-1,z_):=1/(E^z*z)+ExpIntegralEi(-z)+1/2*(Log(-1/z)-Log(-z))+Log(z)
    SetDelayed(Gamma(CN1,z_),
      Plus(Power(Times(Exp(z),z),CN1),ExpIntegralEi(Negate(z)),Times(C1D2,Subtract(Log(Negate(Power(z,CN1))),Log(Negate(z)))),Log(z))),
    // Gamma(-1/2,z_):=2/(E^z*Sqrt(z))-2*Sqrt(Pi)*(1-Erf(Sqrt(z)))
    SetDelayed(Gamma(CN1D2,z_),
      Plus(Times(C2,Power(Times(Exp(z),Sqrt(z)),CN1)),Times(CN2,Sqrt(Pi),Subtract(C1,Erf(Sqrt(z)))))),
    // Gamma(0,z_):=-ExpIntegralEi(-z)+1/2*(-Log(-1/z)+Log(-z))-Log(z)
    SetDelayed(Gamma(C0,z_),
      Plus(Negate(ExpIntegralEi(Negate(z))),Times(C1D2,Plus(Negate(Log(Negate(Power(z,CN1)))),Log(Negate(z)))),Negate(Log(z)))),
    // Gamma(1/2,z_):=Sqrt(Pi)*(1-Erf(Sqrt(z)))
    SetDelayed(Gamma(C1D2,z_),
      Times(Sqrt(Pi),Subtract(C1,Erf(Sqrt(z))))),
    // Hypergeometric2F1(a_,b_,b_+n_Integer,z_):=Sum((z^k*Pochhammer(n,k)*Pochhammer(-a+b+n,k))/(Pochhammer(b+n,k)*k!),{k,0,-n})/(1-z)^(a-n)/;n<0
    SetDelayed(Hypergeometric2F1(a_,b_,Plus(b_,$p(n, Integer)),z_),
      Condition(Times(Power(Subtract(C1,z),Plus(Negate(a),n)),Sum(Times(Power(z,k),Power(Times(Pochhammer(Plus(b,n),k),Factorial(k)),CN1),Pochhammer(n,k),Pochhammer(Plus(Negate(a),b,n),k)),List(k,C0,Negate(n)))),Less(n,C0))),
    // PolyGamma(n_Integer,1/2):=(-1)^(n+1)*n!*(-1+2^(n+1))*Zeta(n+1)/;n>0
    SetDelayed(PolyGamma($p(n, Integer),C1D2),
      Condition(Times(Power(CN1,Plus(n,C1)),Factorial(n),Plus(CN1,Power(C2,Plus(n,C1))),Zeta(Plus(n,C1))),Greater(n,C0))),
    // Sinc(z_):=Sin(z)/z/;z!=0
    SetDelayed(Sinc(z_),
      Condition(Times(Power(z,CN1),Sin(z)),Unequal(z,C0)))
  );
}

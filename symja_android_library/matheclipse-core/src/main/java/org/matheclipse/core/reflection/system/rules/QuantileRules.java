package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CSqrt2;
import static org.matheclipse.core.expression.F.ConditionalExpression;
import static org.matheclipse.core.expression.F.Function;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.InverseErfc;
import static org.matheclipse.core.expression.F.LessEqual;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.NormalDistribution;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Quantile;
import static org.matheclipse.core.expression.F.Slot1;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.m;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.s;
import static org.matheclipse.core.expression.F.s_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface QuantileRules {
    /**
     * <ul>
     * <li>index 0 - number of equal rules in <code>RULES</code></li>
     * </ul>
     */
    final public static int[] SIZES = { 0, 1 };

    final public static IAST RULES = List(
            IInit(Quantile, SIZES),
            // Quantile(NormalDistribution(m_,s_)):=ConditionalExpression(m-Sqrt(2)*s*InverseErfc(2*#1),0<=#1<=1)&
            ISetDelayed(Quantile(NormalDistribution(m_,s_)),
                    Function(ConditionalExpression(Plus(m,Times(CN1,CSqrt2,s,InverseErfc(Times(C2,Slot1)))),LessEqual(C0,Slot1,C1))))
    );
}
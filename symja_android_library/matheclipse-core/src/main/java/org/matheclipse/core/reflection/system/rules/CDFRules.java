package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C1DSqrt2;
import static org.matheclipse.core.expression.F.CDF;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CSqrt2;
import static org.matheclipse.core.expression.F.Erfc;
import static org.matheclipse.core.expression.F.Function;
import static org.matheclipse.core.expression.F.GammaDistribution;
import static org.matheclipse.core.expression.F.GammaRegularized;
import static org.matheclipse.core.expression.F.Greater;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.NormalDistribution;
import static org.matheclipse.core.expression.F.Piecewise;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Slot1;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.a;
import static org.matheclipse.core.expression.F.a_;
import static org.matheclipse.core.expression.F.b;
import static org.matheclipse.core.expression.F.b_;
import static org.matheclipse.core.expression.F.d;
import static org.matheclipse.core.expression.F.d_;
import static org.matheclipse.core.expression.F.g;
import static org.matheclipse.core.expression.F.g_;
import static org.matheclipse.core.expression.F.m;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.n;
import static org.matheclipse.core.expression.F.n_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface CDFRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 0, 4 };

  final public static IAST RULES = List(
    IInit(CDF, SIZES),
    // CDF(GammaDistribution(a_,b_)):=Piecewise({{GammaRegularized(a,0,#1/b),#1>0}},0)&
    ISetDelayed(CDF(GammaDistribution(a_,b_)),
      Function(Piecewise(List(List(GammaRegularized(a,C0,Times(Power(b,-1),Slot1)),Greater(Slot1,C0))),C0))),
    // CDF(GammaDistribution(a_,b_,g_,d_)):=Piecewise({{GammaRegularized(a,0,((-d+#1)/b)^g),#1>d}},0)&
    ISetDelayed(CDF(GammaDistribution(a_,b_,g_,d_)),
      Function(Piecewise(List(List(GammaRegularized(a,C0,Power(Times(Power(b,-1),Plus(Negate(d),Slot1)),g)),Greater(Slot1,d))),C0))),
    // CDF(NormalDistribution()):=Erfc(-#1/Sqrt(2))/2&
    ISetDelayed(CDF(NormalDistribution()),
      Function(Times(C1D2,Erfc(Times(CN1,C1DSqrt2,Slot1))))),
    // CDF(NormalDistribution(n_,m_)):=Erfc((-#1+n)/(Sqrt(2)*m))/2&
    ISetDelayed(CDF(NormalDistribution(n_,m_)),
      Function(Times(C1D2,Erfc(Times(Power(Times(CSqrt2,m),-1),Plus(Negate(Slot1),n))))))
  );
}

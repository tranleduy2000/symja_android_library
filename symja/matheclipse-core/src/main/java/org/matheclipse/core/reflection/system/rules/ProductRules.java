package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.$p;
import static org.matheclipse.core.expression.F.And;
import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.Condition;
import static org.matheclipse.core.expression.F.FreeQ;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Max;
import static org.matheclipse.core.expression.F.Min;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Pochhammer;
import static org.matheclipse.core.expression.F.Product;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.s_;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;
import static org.matheclipse.core.expression.F.x_Symbol;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface ProductRules {
  final public static IAST RULES = List(
    // Product(x_Symbol,{x_,0,m_}):=0
    ISetDelayed(Product(x_Symbol,List(x_,C0,m_)),
      C0),
    // Product(x_Symbol,{x_,0,m_,s_}):=0
    ISetDelayed(Product(x_Symbol,List(x_,C0,m_,s_)),
      C0),
    // Product(x_Symbol,{x_,Min_,Max_}):=Pochhammer(Min,1+Max-Min)/;FreeQ(x,Min)&&FreeQ(x,Max)
    ISetDelayed(Product(x_Symbol,List(x_,$p("Min"),$p("Max"))),
      Condition(Pochhammer(Min,Plus(C1,Max,Negate(Min))),And(FreeQ(x,Min),FreeQ(x,Max))))
  );
}

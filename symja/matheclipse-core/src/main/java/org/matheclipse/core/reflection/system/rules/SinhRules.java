package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.ArcCosh;
import static org.matheclipse.core.expression.F.ArcCoth;
import static org.matheclipse.core.expression.F.ArcCsch;
import static org.matheclipse.core.expression.F.ArcSech;
import static org.matheclipse.core.expression.F.ArcSinh;
import static org.matheclipse.core.expression.F.ArcTanh;
import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.CC;
import static org.matheclipse.core.expression.F.CComplexInfinity;
import static org.matheclipse.core.expression.F.CI;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.CNI;
import static org.matheclipse.core.expression.F.CSqrt2;
import static org.matheclipse.core.expression.F.CSqrt3;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISet;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.Indeterminate;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.Pi;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sinh;
import static org.matheclipse.core.expression.F.Sqr;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.oo;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://github.com/axkr/symja_android_library">github.com/axkr/symja_android_library under the tools directory</a>.</p>
 */
public interface SinhRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 19, 6 };

  final public static IAST RULES = List(
    IInit(Sinh, SIZES),
    // Sinh(0)=0
    ISet(Sinh(C0),
      C0),
    // Sinh(1/6*Pi*I)=I/2
    ISet(Sinh(Times(CC(0L,1L,1L,6L),Pi)),
      CC(0L,1L,1L,2L)),
    // Sinh(1/4*Pi*I)=1/2*Sqrt(2)*I
    ISet(Sinh(Times(CC(0L,1L,1L,4L),Pi)),
      Times(CC(0L,1L,1L,2L),CSqrt2)),
    // Sinh(1/3*Pi*I)=1/2*Sqrt(3)*I
    ISet(Sinh(Times(CC(0L,1L,1L,3L),Pi)),
      Times(CC(0L,1L,1L,2L),CSqrt3)),
    // Sinh(1/2*Pi*I)=I
    ISet(Sinh(Times(CC(0L,1L,1L,2L),Pi)),
      CI),
    // Sinh(2/3*Pi*I)=1/2*Sqrt(3)*I
    ISet(Sinh(Times(CC(0L,1L,2L,3L),Pi)),
      Times(CC(0L,1L,1L,2L),CSqrt3)),
    // Sinh(3/4*Pi*I)=1/2*Sqrt(2)*I
    ISet(Sinh(Times(CC(0L,1L,3L,4L),Pi)),
      Times(CC(0L,1L,1L,2L),CSqrt2)),
    // Sinh(5/6*Pi*I)=I/2
    ISet(Sinh(Times(CC(0L,1L,5L,6L),Pi)),
      CC(0L,1L,1L,2L)),
    // Sinh(Pi*I)=0
    ISet(Sinh(Times(CI,Pi)),
      C0),
    // Sinh(7/6*Pi*I)=-I/2
    ISet(Sinh(Times(CC(0L,1L,7L,6L),Pi)),
      CC(0L,1L,-1L,2L)),
    // Sinh(5/4*Pi*I)=-1/2*Sqrt(2)*I
    ISet(Sinh(Times(CC(0L,1L,5L,4L),Pi)),
      Times(CC(0L,1L,-1L,2L),CSqrt2)),
    // Sinh(4/3*Pi*I)=-1/2*Sqrt(3)*I
    ISet(Sinh(Times(CC(0L,1L,4L,3L),Pi)),
      Times(CC(0L,1L,-1L,2L),CSqrt3)),
    // Sinh(3/2*Pi*I)=-I
    ISet(Sinh(Times(CC(0L,1L,3L,2L),Pi)),
      CNI),
    // Sinh(5/3*Pi*I)=-1/2*Sqrt(3)*I
    ISet(Sinh(Times(CC(0L,1L,5L,3L),Pi)),
      Times(CC(0L,1L,-1L,2L),CSqrt3)),
    // Sinh(7/4*Pi*I)=-1/2*Sqrt(2)*I
    ISet(Sinh(Times(CC(0L,1L,7L,4L),Pi)),
      Times(CC(0L,1L,-1L,2L),CSqrt2)),
    // Sinh(11/6*Pi*I)=-I/2
    ISet(Sinh(Times(CC(0L,1L,11L,6L),Pi)),
      CC(0L,1L,-1L,2L)),
    // Sinh(2*Pi*I)=0
    ISet(Sinh(Times(CC(0L,1L,2L,1L),Pi)),
      C0),
    // Sinh(ArcSinh(x_)):=x
    ISetDelayed(Sinh(ArcSinh(x_)),
      x),
    // Sinh(ArcCosh(x_)):=Sqrt((-1+x)/(x+1))*(1+x)
    ISetDelayed(Sinh(ArcCosh(x_)),
      Times(Sqrt(Times(Power(Plus(x,C1),-1),Plus(CN1,x))),Plus(C1,x))),
    // Sinh(ArcTanh(x_)):=x/Sqrt(1-x^2)
    ISetDelayed(Sinh(ArcTanh(x_)),
      Times(x,Power(Plus(C1,Negate(Sqr(x))),CN1D2))),
    // Sinh(ArcCoth(x_)):=1/(Sqrt(1-1/x^2)*x)
    ISetDelayed(Sinh(ArcCoth(x_)),
      Power(Times(Sqrt(Plus(C1,Negate(Power(x,-2)))),x),-1)),
    // Sinh(ArcSech(x_)):=((1+x)*Sqrt((1-x)/(1+x)))/x
    ISetDelayed(Sinh(ArcSech(x_)),
      Times(Power(x,-1),Plus(C1,x),Sqrt(Times(Plus(C1,Negate(x)),Power(Plus(C1,x),-1))))),
    // Sinh(ArcCsch(x_)):=1/x
    ISetDelayed(Sinh(ArcCsch(x_)),
      Power(x,-1)),
    // Sinh(Infinity)=Infinity
    ISet(Sinh(oo),
      oo),
    // Sinh(ComplexInfinity)=Indeterminate
    ISet(Sinh(CComplexInfinity),
      Indeterminate)
  );
}
